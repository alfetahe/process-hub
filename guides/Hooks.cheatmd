# Hooks

Hooks are used to trigger events on specific actions. Hooks can be registered by passing the
handlers to the `:hooks` option of the `t:ProcessHub.t/0` configuration struct or by inserting them
dynamically using the `ProcessHub.Service.HookManager` module.

ProcessHub heavily uses hooks internally in the integration tests.

Hooks have to be in the format of an `mfa` tuple. Basically, they are functions that will be called
when the hook is triggered.

It is possible to register a hook handler with a wildcard argument `:_`, which will be replaced with the hook data when the hook is dispatched.

## Hook registration examples

Example dynamic hook registration using the `t:ProcessHub.t/0` configuration struct:
```elixir
# Register a hook handler for the `:cluster_join` event with a wildcard argument.
defmodule MyApp.Application do
  use Application

  def start(_type, _args) do
    children = [
      ProcessHub.child_spec(%ProcessHub{
        hub_id: :my_hub,
        hooks: [
            ProcessHub.Constant.Hook.cluster_join(), {MyModule, :my_function, [:some_data, :_]}
        ]
      })
    ]

    opts = [strategy: :one_for_one, name: MyApp.Supervisor]
    Supervisor.start_link(children, opts)
  end
end
```

Example hook registration using the `ProcessHub.Service.HookManager` module:
```elixir
# Register a hook handler for the `:cluster_join` event with a wildcard argument.
ProcessHub.Service.HookManager.register_hook(:my_hub, ProcessHub.Constant.Hook.cluster_join(), {MyModule, :my_function, [:some_data, :_]})
```

## Hook handler examples
```elixir
# The hook handler should be in the following format:
defmodule MyModule do
  def my_function(:some_data, dynamic_hook_data) do
    # Do something with the data.
  end
end
```

## Available hooks
{: .width-100}

| Event Key                        | Trigger                             | Data                                |
| ------------                     | -------------                       | ---------------                     |
| `cluster_join_hook`              | Node joins the cluster              | `node()`                            |
| `cluster_leave_hook`             | Node leaves the cluster             | `node()`                            |
| `registry_pid_inserted_hook`     | Process registered                  | `{child_id(), [{node(), pid()}]}`   |
| `registry_pid_removed_hook`      | Process unregistered                | `child_id()`                        |
| `child_migrated_hook`            | Process migrated                    | `{child_id(), node()}`              |
| `priority_state_updated_hook`    | Priority state updated              | `{priority_level(), list()}`        |
| `pre_nodes_redistribution_hook`  | Nodes redistribution start          | `{:nodeup or :nodedown, node()}`    |
| `post_nodes_redistribution_hook` | Nodes redistribution end            | `{:nodeup or :nodedown, node()}`    |
| `forwarded_migration_hook`       | Migration was forwarded and handled |  `{child_id(), node()}`             |

See `ProcessHub.Constant.Hook` module for more information.
